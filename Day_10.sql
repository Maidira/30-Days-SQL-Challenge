CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    City VARCHAR(50),
    LoyaltyPoints INT
);

INSERT INTO Customers (CustomerID, CustomerName, City, LoyaltyPoints) VALUES
(1, 'John Doe', 'New York', 120),
(2, 'Jane Smith', 'Los Angeles', 340),
(3, 'Jim Brown', 'Chicago', 210),
(4, 'Lucy White', 'Houston', 450),
(5, 'George Black', 'Phoenix', 60);


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, OrderAmount) VALUES
(101, 1, '2023-01-05', 250.00),
(102, 2, '2023-01-10', 500.00),
(103, 3, '2023-02-15', 300.00),
(104, 4, '2023-03-20', 150.00),
(105, 2, '2023-04-25', 700.00),
(106, 5, '2023-05-05', 100.00),
(107, 3, '2023-06-30', 450.00),
(108, 1, '2023-07-14', 350.00),
(109, 4, '2023-08-20', 600.00);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10, 2)
);

INSERT INTO Products (ProductID, ProductName, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 699.99),
(3, 'Headphones', 'Electronics', 199.99),
(4, 'Chair', 'Furniture', 150.00),
(5, 'Table', 'Furniture', 400.00);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity) VALUES
(1, 101, 1, 1),
(2, 101, 3, 2),
(3, 102, 2, 1),
(4, 103, 4, 3),
(5, 104, 5, 1),
(6, 105, 2, 2),
(7, 106, 3, 1),
(8, 107, 1, 2),
(9, 108, 4, 1),
(10, 109, 5, 3);



-- Q1. Find customers who placed at least one order but have an average order amount less than the average order amount of all customers. Display the customer name, total number of orders, and average order amount.
WITH CustomerOrderSummary AS (
    SELECT c.CustomerID, 
          c.CustomerName, 
          COUNT(o.OrderID) AS TotalOrders,
          AVG(o.OrderAmount) AS AvgOrderAmount
    FROM Customers c
    JOIN Orders o 
        ON c.CustomerID = o.CustomerID
    GROUP BY 
        c.CustomerID, 
        c.CustomerName
)
SELECT 
    cos.CustomerName, 
    cos.TotalOrders, 
    cos.AvgOrderAmount
FROM CustomerOrderSummary cos
JOIN (
    SELECT AVG(OrderAmount) AS OverallAvgAmount
    FROM Orders
) oa 
  ON cos.AvgOrderAmount < oa.OverallAvgAmount;


-- Q2. List all customers and whether they have placed an order or not. If they havenâ€™t placed an order, show a NULL for the order amount.
SELECT 
  c.CustomerName, 
  o.OrderID, 
  o.OrderAmount
FROM Customers c
LEFT JOIN Orders o 
  ON c.CustomerID = o.CustomerID;


-- Q3. For each product category, calculate the total revenue generated by each product and the percentage of total revenue for that category contributed by each product. Display the category, product name, total revenue, and percentage contribution.
WITH ProductRevenue AS (
    SELECT p.Category, 
            p.ProductName, 
            SUM(od.Quantity * p.Price) AS TotalRevenue
    FROM Products p
    JOIN OrderDetails od 
        ON p.ProductID = od.ProductID
    GROUP BY 
        p.Category, 
        p.ProductName
),
CategoryTotals AS (
    SELECT 
        Category, 
        SUM(TotalRevenue) AS CategoryTotal
    FROM ProductRevenue
    GROUP BY Category
)
SELECT 
    pr.Category, 
    pr.ProductName, 
    pr.TotalRevenue,
    ROUND((pr.TotalRevenue / ct.CategoryTotal) * 100, 2) AS PercentageContribution
FROM ProductRevenue pr
JOIN CategoryTotals ct 
    ON pr.Category = ct.Category;
