CREATE TABLE Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR(100),
    AuthorID INT,
    Genre VARCHAR(50),
    PublishedYear INT,
    Price DECIMAL(6, 2)
);

INSERT INTO Books VALUES
(1, 'The Art of War', 101, 'Philosophy', 500, 20.00),
(2, 'Pride and Prejudice', 102, 'Romance', 1813, 15.00),
(3, 'To Kill a Mockingbird', 103, 'Fiction', 1960, 25.00),
(4, '1984', 104, 'Dystopian', 1949, 18.00),
(5, 'The Great Gatsby', 105, 'Fiction', 1925, 22.00);


CREATE TABLE Authors (
    AuthorID INT PRIMARY KEY,
    AuthorName VARCHAR(100),
    Country VARCHAR(50),
    BirthYear INT
);

INSERT INTO Authors VALUES
(101, 'Sun Tzu', 'China', -544),
(102, 'Jane Austen', 'England', 1775),
(103, 'Harper Lee', 'USA', 1926),
(104, 'George Orwell', 'India', 1903),
(105, 'F. Scott Fitzgerald', 'USA', 1896);


CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    BookID INT,
    SaleDate DATE,
    QuantitySold INT,
    TotalRevenue DECIMAL(8, 2)
);

INSERT INTO Sales VALUES
(1, 1, '2023-01-15', 5, 100.00),
(2, 2, '2023-02-20', 8, 120.00),
(3, 3, '2023-03-05', 3, 75.00),
(4, 4, '2023-04-01', 7, 126.00),
(5, 5, '2023-05-12', 10, 220.00);


-- Q1. Write a query to find books whose titles start with a vowel and contain exactly 3 words.
SELECT Title
FROM Books
WHERE REGEXP_LIKE(Title, '^[Pp]')
  AND LENGTH(TRIM(Title)) - LENGTH(REPLACE(Title, ' ', '')) = 2;


-- Q2. For each book, show the previous and next book's title based on the publication year.
SELECT Title,
       LAG(Title) OVER (ORDER BY PublishedYear) AS PreviousBook,
       LEAD(Title) OVER (ORDER BY PublishedYear) AS NextBook
FROM Books;


-- Q3. Write a query to show the total revenue generated by each genre in separate columns.
SELECT 
    SUM(CASE WHEN Genre = 'Philosophy' THEN TotalRevenue ELSE 0 END) AS PhilosophyRevenue,
    SUM(CASE WHEN Genre = 'Romance' THEN TotalRevenue ELSE 0 END) AS RomanceRevenue,
    SUM(CASE WHEN Genre = 'Fiction' THEN TotalRevenue ELSE 0 END) AS FictionRevenue,
    SUM(CASE WHEN Genre = 'Dystopian' THEN TotalRevenue ELSE 0 END) AS DystopianRevenue
FROM Books b
JOIN Sales s ON b.BookID = s.BookID;


-- Q4. Extract the first name of authors from the AuthorName column.
SELECT AuthorName, 
       SUBSTRING_INDEX(AuthorName, ' ', 1) AS FirstName
FROM Authors;
